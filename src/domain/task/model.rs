//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::Deserialize;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Hash, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "String(Some(1))")]
pub enum TaskState {
    #[sea_orm(string_value = "pending")]
    Pending,
    #[sea_orm(string_value = "in_progress")]
    InProgress,
    #[sea_orm(string_value = "completed")]
    Completed,
}

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Hash)]
#[sea_orm(table_name = "tasks")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub title: String,
    pub description: Option<String>,
    pub due_date: Option<DateTime>,
    pub status: TaskState,
    pub user_id: Option<i32>,
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "crate::domain::collaboration::model::Entity")]
    Collaborations,
    #[sea_orm(has_many = "crate::domain::notification::model::Entity")]
    Notifications,
    #[sea_orm(
        belongs_to = "crate::domain::user::model::Entity",
        from = "Column::UserId",
        to = "crate::domain::user::model::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<crate::domain::collaboration::model::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Collaborations.def()
    }
}

impl Related<crate::domain::notification::model::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Notifications.def()
    }
}

impl Related<crate::domain::user::model::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
