//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Hash)]
#[sea_orm(table_name = "notifications")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub user_id: Option<i32>,
    pub task_id: Option<i32>,
    pub message: String,
    #[sea_orm(default_value = false)]
    pub read: bool,
    pub created_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "crate::domain::task::model::Entity",
        from = "Column::TaskId",
        to = "crate::domain::task::model::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Tasks,
    #[sea_orm(
        belongs_to = "crate::domain::user::model::Entity",
        from = "Column::UserId",
        to = "crate::domain::user::model::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<crate::domain::task::model::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tasks.def()
    }
}

impl Related<crate::domain::user::model::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
