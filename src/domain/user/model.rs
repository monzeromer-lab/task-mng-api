//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Default)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub username: String,
    #[sea_orm(unique)]
    pub email: String,
    #[sea_orm(default_value=false)]
    pub active: bool,
    pub password_hash: String,
    pub created_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "crate::domain::collaboration::model::Entity")]
    Collaborations,
    #[sea_orm(has_many = "crate::domain::notification::model::Entity")]
    Notifications,
    #[sea_orm(has_many = "crate::domain::task::model::Entity")]
    Tasks,
}

impl Related<crate::domain::collaboration::model::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Collaborations.def()
    }
}

impl Related<crate::domain::notification::model::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Notifications.def()
    }
}

impl Related<crate::domain::task::model::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tasks.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
